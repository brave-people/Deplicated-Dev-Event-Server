// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set UsersQuerySet

// UsersQuerySet is an queryset type for Users
type UsersQuerySet struct {
	db *gorm.DB
}

// NewUsersQuerySet constructs new UsersQuerySet
func NewUsersQuerySet(db *gorm.DB) UsersQuerySet {
	return UsersQuerySet{
		db: db.Model(&Users{}),
	}
}

func (qs UsersQuerySet) w(db *gorm.DB) UsersQuerySet {
	return NewUsersQuerySet(db)
}

func (qs UsersQuerySet) Select(fields ...UsersDBSchemaField) UsersQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *Users) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Users) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) All(ret *[]Users) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) CreatedAtEq(createdAt time.Time) UsersQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) CreatedAtGt(createdAt time.Time) UsersQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) CreatedAtGte(createdAt time.Time) UsersQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) CreatedAtLt(createdAt time.Time) UsersQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) CreatedAtLte(createdAt time.Time) UsersQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) CreatedAtNe(createdAt time.Time) UsersQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) Delete() error {
	return qs.db.Delete(Users{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Users{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Users{})
	return db.RowsAffected, db.Error
}

// EmailEq is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) EmailEq(email string) UsersQuerySet {
	return qs.w(qs.db.Where("email = ?", email))
}

// EmailGt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) EmailGt(email string) UsersQuerySet {
	return qs.w(qs.db.Where("email > ?", email))
}

// EmailGte is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) EmailGte(email string) UsersQuerySet {
	return qs.w(qs.db.Where("email >= ?", email))
}

// EmailIn is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) EmailIn(email ...string) UsersQuerySet {
	if len(email) == 0 {
		qs.db.AddError(errors.New("must at least pass one email in EmailIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("email IN (?)", email))
}

// EmailLike is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) EmailLike(email string) UsersQuerySet {
	return qs.w(qs.db.Where("email LIKE ?", email))
}

// EmailLt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) EmailLt(email string) UsersQuerySet {
	return qs.w(qs.db.Where("email < ?", email))
}

// EmailLte is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) EmailLte(email string) UsersQuerySet {
	return qs.w(qs.db.Where("email <= ?", email))
}

// EmailNe is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) EmailNe(email string) UsersQuerySet {
	return qs.w(qs.db.Where("email != ?", email))
}

// EmailNotIn is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) EmailNotIn(email ...string) UsersQuerySet {
	if len(email) == 0 {
		qs.db.AddError(errors.New("must at least pass one email in EmailNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("email NOT IN (?)", email))
}

// EmailNotlike is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) EmailNotlike(email string) UsersQuerySet {
	return qs.w(qs.db.Where("email NOT LIKE ?", email))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) GetUpdater() UsersUpdater {
	return NewUsersUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) IDEq(ID uint) UsersQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) IDGt(ID uint) UsersQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) IDGte(ID uint) UsersQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) IDIn(ID ...uint) UsersQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) IDLt(ID uint) UsersQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) IDLte(ID uint) UsersQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) IDNe(ID uint) UsersQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) IDNotIn(ID ...uint) UsersQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) Limit(limit int) UsersQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NicknameEq is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) NicknameEq(nickname string) UsersQuerySet {
	return qs.w(qs.db.Where("nickname = ?", nickname))
}

// NicknameGt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) NicknameGt(nickname string) UsersQuerySet {
	return qs.w(qs.db.Where("nickname > ?", nickname))
}

// NicknameGte is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) NicknameGte(nickname string) UsersQuerySet {
	return qs.w(qs.db.Where("nickname >= ?", nickname))
}

// NicknameIn is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) NicknameIn(nickname ...string) UsersQuerySet {
	if len(nickname) == 0 {
		qs.db.AddError(errors.New("must at least pass one nickname in NicknameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("nickname IN (?)", nickname))
}

// NicknameLike is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) NicknameLike(nickname string) UsersQuerySet {
	return qs.w(qs.db.Where("nickname LIKE ?", nickname))
}

// NicknameLt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) NicknameLt(nickname string) UsersQuerySet {
	return qs.w(qs.db.Where("nickname < ?", nickname))
}

// NicknameLte is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) NicknameLte(nickname string) UsersQuerySet {
	return qs.w(qs.db.Where("nickname <= ?", nickname))
}

// NicknameNe is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) NicknameNe(nickname string) UsersQuerySet {
	return qs.w(qs.db.Where("nickname != ?", nickname))
}

// NicknameNotIn is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) NicknameNotIn(nickname ...string) UsersQuerySet {
	if len(nickname) == 0 {
		qs.db.AddError(errors.New("must at least pass one nickname in NicknameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("nickname NOT IN (?)", nickname))
}

// NicknameNotlike is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) NicknameNotlike(nickname string) UsersQuerySet {
	return qs.w(qs.db.Where("nickname NOT LIKE ?", nickname))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) Offset(offset int) UsersQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs UsersQuerySet) One(ret *Users) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) OrderAscByCreatedAt() UsersQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByEmail is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) OrderAscByEmail() UsersQuerySet {
	return qs.w(qs.db.Order("email ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) OrderAscByID() UsersQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByNickname is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) OrderAscByNickname() UsersQuerySet {
	return qs.w(qs.db.Order("nickname ASC"))
}

// OrderAscByPassword is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) OrderAscByPassword() UsersQuerySet {
	return qs.w(qs.db.Order("password ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) OrderAscByUpdatedAt() UsersQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) OrderDescByCreatedAt() UsersQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByEmail is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) OrderDescByEmail() UsersQuerySet {
	return qs.w(qs.db.Order("email DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) OrderDescByID() UsersQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByNickname is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) OrderDescByNickname() UsersQuerySet {
	return qs.w(qs.db.Order("nickname DESC"))
}

// OrderDescByPassword is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) OrderDescByPassword() UsersQuerySet {
	return qs.w(qs.db.Order("password DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) OrderDescByUpdatedAt() UsersQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PasswordEq is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) PasswordEq(password string) UsersQuerySet {
	return qs.w(qs.db.Where("password = ?", password))
}

// PasswordGt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) PasswordGt(password string) UsersQuerySet {
	return qs.w(qs.db.Where("password > ?", password))
}

// PasswordGte is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) PasswordGte(password string) UsersQuerySet {
	return qs.w(qs.db.Where("password >= ?", password))
}

// PasswordIn is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) PasswordIn(password ...string) UsersQuerySet {
	if len(password) == 0 {
		qs.db.AddError(errors.New("must at least pass one password in PasswordIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("password IN (?)", password))
}

// PasswordLike is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) PasswordLike(password string) UsersQuerySet {
	return qs.w(qs.db.Where("password LIKE ?", password))
}

// PasswordLt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) PasswordLt(password string) UsersQuerySet {
	return qs.w(qs.db.Where("password < ?", password))
}

// PasswordLte is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) PasswordLte(password string) UsersQuerySet {
	return qs.w(qs.db.Where("password <= ?", password))
}

// PasswordNe is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) PasswordNe(password string) UsersQuerySet {
	return qs.w(qs.db.Where("password != ?", password))
}

// PasswordNotIn is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) PasswordNotIn(password ...string) UsersQuerySet {
	if len(password) == 0 {
		qs.db.AddError(errors.New("must at least pass one password in PasswordNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("password NOT IN (?)", password))
}

// PasswordNotlike is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) PasswordNotlike(password string) UsersQuerySet {
	return qs.w(qs.db.Where("password NOT LIKE ?", password))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) UpdatedAtEq(updatedAt time.Time) UsersQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) UpdatedAtGt(updatedAt time.Time) UsersQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) UpdatedAtGte(updatedAt time.Time) UsersQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) UpdatedAtLt(updatedAt time.Time) UsersQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) UpdatedAtLte(updatedAt time.Time) UsersQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs UsersQuerySet) UpdatedAtNe(updatedAt time.Time) UsersQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u UsersUpdater) SetCreatedAt(createdAt time.Time) UsersUpdater {
	u.fields[string(UsersDBSchema.CreatedAt)] = createdAt
	return u
}

// SetEmail is an autogenerated method
// nolint: dupl
func (u UsersUpdater) SetEmail(email string) UsersUpdater {
	u.fields[string(UsersDBSchema.Email)] = email
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u UsersUpdater) SetID(ID uint) UsersUpdater {
	u.fields[string(UsersDBSchema.ID)] = ID
	return u
}

// SetNickname is an autogenerated method
// nolint: dupl
func (u UsersUpdater) SetNickname(nickname string) UsersUpdater {
	u.fields[string(UsersDBSchema.Nickname)] = nickname
	return u
}

// SetPassword is an autogenerated method
// nolint: dupl
func (u UsersUpdater) SetPassword(password string) UsersUpdater {
	u.fields[string(UsersDBSchema.Password)] = password
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u UsersUpdater) SetUpdatedAt(updatedAt time.Time) UsersUpdater {
	u.fields[string(UsersDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u UsersUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u UsersUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set UsersQuerySet

// ===== BEGIN of Users modifiers

// UsersDBSchemaField describes database schema field. It requires for method 'Update'
type UsersDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f UsersDBSchemaField) String() string {
	return string(f)
}

// UsersDBSchema stores db field names of Users
var UsersDBSchema = struct {
	ID        UsersDBSchemaField
	Nickname  UsersDBSchemaField
	Email     UsersDBSchemaField
	Password  UsersDBSchemaField
	CreatedAt UsersDBSchemaField
	UpdatedAt UsersDBSchemaField
}{

	ID:        UsersDBSchemaField("id"),
	Nickname:  UsersDBSchemaField("nickname"),
	Email:     UsersDBSchemaField("email"),
	Password:  UsersDBSchemaField("password"),
	CreatedAt: UsersDBSchemaField("created_at"),
	UpdatedAt: UsersDBSchemaField("updated_at"),
}

// Update updates Users fields by primary key
// nolint: dupl
func (o *Users) Update(db *gorm.DB, fields ...UsersDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"nickname":   o.Nickname,
		"email":      o.Email,
		"password":   o.Password,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Users %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// UsersUpdater is an Users updates manager
type UsersUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewUsersUpdater creates new Users updater
// nolint: dupl
func NewUsersUpdater(db *gorm.DB) UsersUpdater {
	return UsersUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Users{}),
	}
}

// ===== END of Users modifiers

// ===== END of all query sets
