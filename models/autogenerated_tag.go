// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"strings"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set TagQuerySet

// TagQuerySet is an queryset type for Tag
type TagQuerySet struct {
	db *gorm.DB
}

// NewTagQuerySet constructs new TagQuerySet
func NewTagQuerySet(db *gorm.DB) TagQuerySet {
	return TagQuerySet{
		db: db.Model(&Tag{}),
	}
}

func (qs TagQuerySet) w(db *gorm.DB) TagQuerySet {
	return NewTagQuerySet(db)
}

func (qs TagQuerySet) Select(fields ...TagDBSchemaField) TagQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *Tag) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Tag) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) All(ret *[]Tag) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Delete is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) Delete() error {
	return qs.db.Delete(Tag{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Tag{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Tag{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) GetUpdater() TagUpdater {
	return NewTagUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDEq(ID uint) TagQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDGt(ID uint) TagQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDGte(ID uint) TagQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDIn(ID ...uint) TagQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDLt(ID uint) TagQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDLte(ID uint) TagQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDNe(ID uint) TagQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDNotIn(ID ...uint) TagQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) Limit(limit int) TagQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameEq(name string) TagQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameGt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameGt(name string) TagQuerySet {
	return qs.w(qs.db.Where("name > ?", name))
}

// NameGte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameGte(name string) TagQuerySet {
	return qs.w(qs.db.Where("name >= ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameIn(name ...string) TagQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name IN (?)", name))
}

// NameLike is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameLike(name string) TagQuerySet {
	return qs.w(qs.db.Where("name LIKE ?", name))
}

// NameLt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameLt(name string) TagQuerySet {
	return qs.w(qs.db.Where("name < ?", name))
}

// NameLte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameLte(name string) TagQuerySet {
	return qs.w(qs.db.Where("name <= ?", name))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameNe(name string) TagQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameNotIn(name ...string) TagQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", name))
}

// NameNotlike is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameNotlike(name string) TagQuerySet {
	return qs.w(qs.db.Where("name NOT LIKE ?", name))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) Offset(offset int) TagQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs TagQuerySet) One(ret *Tag) error {
	return qs.db.First(ret).Error
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByID() TagQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByName is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByName() TagQuerySet {
	return qs.w(qs.db.Order("name ASC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByID() TagQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByName is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByName() TagQuerySet {
	return qs.w(qs.db.Order("name DESC"))
}

// SetID is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetID(ID uint) TagUpdater {
	u.fields[string(TagDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetName(name string) TagUpdater {
	u.fields[string(TagDBSchema.Name)] = name
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u TagUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u TagUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set TagQuerySet

// ===== BEGIN of Tag modifiers

// TagDBSchemaField describes database schema field. It requires for method 'Update'
type TagDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f TagDBSchemaField) String() string {
	return string(f)
}

// TagDBSchema stores db field names of Tag
var TagDBSchema = struct {
	ID   TagDBSchemaField
	Name TagDBSchemaField
}{

	ID:   TagDBSchemaField("id"),
	Name: TagDBSchemaField("name"),
}

// Update updates Tag fields by primary key
// nolint: dupl
func (o *Tag) Update(db *gorm.DB, fields ...TagDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":   o.ID,
		"name": o.Name,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Tag %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// TagUpdater is an Tag updates manager
type TagUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewTagUpdater creates new Tag updater
// nolint: dupl
func NewTagUpdater(db *gorm.DB) TagUpdater {
	return TagUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Tag{}),
	}
}

// ===== END of Tag modifiers

// ===== END of all query sets
